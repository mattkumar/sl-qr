[{"name":"app.R","content":"library(shiny)\r\nlibrary(qrcode)\r\nlibrary(png)\r\n\r\nset.seed(123)\r\npatient_data <- data.frame(\r\n  id = paste0(\"P\", sprintf(\"%03d\", 1:100)),\r\n  weight = runif(100, min = 110, max = 210),\r\n  height = runif(100, min = 150, max = 184),\r\n  age = rnorm(100, mean = 45, sd = 15),\r\n  income = rnorm(100, mean = 65000, sd = 25000),\r\n  blood_pressure = rnorm(100, mean = 125, sd = 20),\r\n  cholesterol = rnorm(100, mean = 180, sd = 35),\r\n  bmi = runif(100, min = 18, max = 35),\r\n  heart_rate = rnorm(100, mean = 72, sd = 12),\r\n  glucose = rnorm(100, mean = 100, sd = 15),\r\n  stringsAsFactors = FALSE\r\n)\r\n\r\nui <- fluidPage(\r\n  fluidRow(\r\n    column(3),\r\n    column(3,\r\n           selectInput(\"x_var\", \"Choose X Variable:\", \r\n                       choices = c(\"weight\", \"height\", \"age\", \"income\", \"blood_pressure\", \"cholesterol\", \"bmi\", \"heart_rate\", \"glucose\"), \r\n                       selected = \"weight\")\r\n    ),\r\n    column(3,\r\n           selectInput(\"y_var\", \"Choose Y Variable:\", \r\n                       choices = c(\"weight\", \"height\", \"age\", \"income\", \"blood_pressure\", \"cholesterol\", \"bmi\", \"heart_rate\", \"glucose\"), \r\n                       selected = \"height\")\r\n    ),\r\n    column(3)\r\n  ),\r\n  plotOutput(\"scatter_plot\", height = \"500px\")\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  \r\n  create_plot <- reactive({\r\n    function() {\r\n      # Create vibrant color gradient based on data density\r\n      colors <- colorRampPalette(c(\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\", \"#96CEB4\", \"#FFEAA7\"))(100)\r\n      point_colors <- colors[sample(1:100, 100, replace = TRUE)]\r\n      \r\n      # Main scatter plot with enhanced styling\r\n      par(bg = \"#f8f9fa\", family = \"sans\")\r\n      plot(patient_data[[input$x_var]], patient_data[[input$y_var]],\r\n           xlab = toupper(gsub(\"_\", \" \", input$x_var)),\r\n           ylab = toupper(gsub(\"_\", \" \", input$y_var)),\r\n           main = paste(toupper(gsub(\"_\", \" \", input$x_var)), \"vs\", toupper(gsub(\"_\", \" \", input$y_var))),\r\n           pch = 19, col = point_colors, cex = 1.5,\r\n           col.main = \"#2c3e50\", col.lab = \"#34495e\", col.axis = \"#7f8c8d\",\r\n           cex.main = 1.4, cex.lab = 1.2, cex.axis = 1.1,\r\n           panel.first = {\r\n             grid(col = \"#ecf0f1\", lty = 1, lwd = 0.8)\r\n           })\r\n      \r\n      # Add subtle trend line\r\n      lm_fit <- lm(patient_data[[input$y_var]] ~ patient_data[[input$x_var]])\r\n      abline(lm_fit, col = \"#e74c3c\", lwd = 3, lty = 2)\r\n      \r\n      # Create QR code and add it as an inset\r\n      qr_data <- paste(\"User matt\\nDate\", Sys.Date(), \"\\nFilters\", input$x_var, input$y_var)\r\n      qr_code_obj <- qrcode::qr_code(qr_data)\r\n      \r\n      # Get plot dimensions and device info for pixel calculations\r\n      usr <- par(\"usr\")\r\n      plt <- par(\"plt\")\r\n      \r\n      # QR code dimensions - fixed at 150x150 pixels\r\n      qr_pixels <- 150\r\n      \r\n      # Get device dimensions in inches\r\n      dev_width_in <- par(\"din\")[1]\r\n      dev_height_in <- par(\"din\")[2]\r\n      \r\n      # Convert to plot coordinates based on device size\r\n      plot_width <- usr[2] - usr[1]\r\n      plot_height <- usr[4] - usr[3]\r\n      \r\n      # Calculate QR size in plot units (approximation)\r\n      qr_width <- plot_width * (qr_pixels / (dev_width_in * 72)) * (plt[2] - plt[1])\r\n      qr_height <- plot_height * (qr_pixels / (dev_height_in * 72)) * (plt[4] - plt[3])\r\n      \r\n      # Position with reduced padding from left (closer to Y axis)\r\n      padding_factor <- 0.01\r\n      qr_xleft <- usr[1] + plot_width * padding_factor\r\n      qr_xright <- qr_xleft + qr_width\r\n      qr_ybottom <- usr[3] + plot_height * 0.02\r\n      qr_ytop <- qr_ybottom + qr_height\r\n      \r\n      # Convert QR code to raster and plot (no background/border)\r\n      par(fig = c(\r\n        (qr_xleft - usr[1]) / plot_width * (plt[2] - plt[1]) + plt[1],\r\n        (qr_xright - usr[1]) / plot_width * (plt[2] - plt[1]) + plt[1],\r\n        (qr_ybottom - usr[3]) / plot_height * (plt[4] - plt[3]) + plt[3],\r\n        (qr_ytop - usr[3]) / plot_height * (plt[4] - plt[3]) + plt[3]\r\n      ), new = TRUE, mar = c(0, 0, 0, 0))\r\n      \r\n      plot(qr_code_obj, axes = FALSE, xlab = \"\", ylab = \"\", mar = c(0, 0, 0, 0))\r\n    }\r\n  })\r\n  \r\n  output$scatter_plot <- renderPlot({\r\n    plot_func <- create_plot()\r\n    plot_func()\r\n  })\r\n}\r\n\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"sl-qr.Rproj","content":"Version: 1.0\r\n\r\nRestoreWorkspace: Default\r\nSaveWorkspace: Default\r\nAlwaysSaveHistory: Default\r\n\r\nEnableCodeIndexing: Yes\r\nUseSpacesForTab: Yes\r\nNumSpacesForTab: 2\r\nEncoding: UTF-8\r\n\r\nRnwWeave: Sweave\r\nLaTeX: pdfLaTeX\r\n","type":"text"}]
