[{"name":"app.R","content":"library(shiny)\r\nlibrary(qrcode)\r\nlibrary(officer)\r\n\r\nset.seed(123)\r\npatient_data <- data.frame(\r\n  id = paste0(\"P\", sprintf(\"%02d\", 1:10)),\r\n  sex = sample(c(\"Male\", \"Female\"), 10, replace = TRUE),\r\n  age_group = sample(c(\"18-30\", \"31-50\", \"51-70\", \"70+\"), 10, replace = TRUE),\r\n  biomarker = sample(c(\"Positive\", \"Negative\", \"Borderline\"), 10, replace = TRUE),\r\n  stringsAsFactors = FALSE\r\n)\r\n\r\nui <- fluidPage(\r\n  titlePanel(\"Demo: Plot with QR Code\"),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      selectInput(\"x_var\", \"X-axis Variable:\", \r\n                  choices = c(\"sex\", \"age_group\", \"biomarker\"), \r\n                  selected = \"sex\"),\r\n      selectInput(\"fill_var\", \"Fill Variable:\", \r\n                  choices = c(\"sex\", \"age_group\", \"biomarker\"), \r\n                  selected = \"biomarker\"),\r\n      downloadButton(\"download_plot\", \"Download Plot\")\r\n    ),\r\n    mainPanel(\r\n      plotOutput(\"stacked_plot\", height = \"500px\")\r\n    )\r\n  )\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  \r\n  create_plot <- reactive({\r\n    if (input$x_var == input$fill_var) return(NULL)\r\n    \r\n    # Create count data\r\n    plot_data <- aggregate(id ~ get(input$x_var) + get(input$fill_var), \r\n                           data = patient_data, \r\n                           FUN = length)\r\n    names(plot_data) <- c(\"x_var\", \"fill_var\", \"n\")\r\n    \r\n    # Get unique categories\r\n    x_cats <- unique(plot_data$x_var)\r\n    fill_cats <- unique(plot_data$fill_var)\r\n    \r\n    # Create color palette\r\n    colors <- rainbow(length(fill_cats), alpha = 0.8)\r\n    \r\n    # Create the plot using base R graphics\r\n    function() {\r\n      # Set up the plot area\r\n      par(mar = c(5, 4, 4, 2) + 0.1)\r\n      \r\n      # Calculate bar positions\r\n      n_x <- length(x_cats)\r\n      n_fill <- length(fill_cats)\r\n      bar_width <- 0.8 / n_fill\r\n      \r\n      # Find max count for y-axis\r\n      max_count <- max(plot_data$n)\r\n      \r\n      # Create empty plot\r\n      plot(1, type = \"n\", xlim = c(0.5, n_x + 0.5), ylim = c(0, max_count * 1.1),\r\n           xlab = tools::toTitleCase(gsub(\"_\", \" \", input$x_var)),\r\n           ylab = \"Count\",\r\n           main = paste(\"Bar Plot:\", input$x_var, \"by\", input$fill_var),\r\n           xaxt = \"n\", cex.main = 1.2)\r\n      \r\n      # Add x-axis labels\r\n      axis(1, at = 1:n_x, labels = x_cats)\r\n      \r\n      # Draw bars\r\n      for (i in 1:nrow(plot_data)) {\r\n        x_pos <- which(x_cats == plot_data$x_var[i])\r\n        fill_pos <- which(fill_cats == plot_data$fill_var[i])\r\n        \r\n        bar_x <- x_pos - 0.4 + (fill_pos - 1) * bar_width + bar_width/2\r\n        \r\n        rect(bar_x - bar_width/2, 0, bar_x + bar_width/2, plot_data$n[i],\r\n             col = colors[fill_pos], border = \"white\", lwd = 1)\r\n        \r\n        # Add text labels\r\n        text(bar_x, plot_data$n[i] + max_count * 0.02, \r\n             plot_data$n[i], pos = 3, font = 2, cex = 0.8)\r\n      }\r\n      \r\n      # Add legend\r\n      legend(\"topright\", legend = fill_cats, fill = colors,\r\n             title = tools::toTitleCase(gsub(\"_\", \" \", input$fill_var)),\r\n             bg = \"white\", box.lwd = 1)\r\n    }\r\n  })\r\n  \r\n  output$stacked_plot <- renderPlot({\r\n    plot_func <- create_plot()\r\n    if (is.null(plot_func)) {\r\n      plot(1, type = \"n\", xlab = \"\", ylab = \"\", main = \"\", axes = FALSE)\r\n      text(1, 1, \"Please select different variables\", cex = 1.5, col = \"gray50\")\r\n    } else {\r\n      plot_func()\r\n    }\r\n  })\r\n  \r\n  output$download_plot <- downloadHandler(\r\n    filename = function() paste0(\"result_with_qr_\", Sys.Date(), \".pptx\"),\r\n    content = function(file) {\r\n      plot_func <- create_plot()\r\n      if (is.null(plot_func)) stop(\"No plot to save\")\r\n      \r\n      png_f <- tempfile(fileext = \".png\")\r\n      png(png_f, width = 1200, height = 800, res = 300, bg = \"white\")\r\n      plot_func()\r\n      dev.off()\r\n      \r\n      qr_data <- paste(\"User matt\\nDate\", Sys.Date(), \"\\nFilters\", input$x_var, input$fill_var)\r\n      qr_png_f <- tempfile(fileext = \".png\")\r\n      png(qr_png_f, width = 200, height = 200)\r\n      plot(qrcode::qr_code(qr_data))\r\n      dev.off()\r\n      \r\n      officer::read_pptx() %>%\r\n        officer::add_slide(layout = \"Title and Content\", master = \"Office Theme\") %>%\r\n        officer::ph_with(value = officer::external_img(png_f, width = 10, height = 6.67),\r\n                         location = officer::ph_location_type(type = \"body\")) %>%\r\n        officer::ph_with(value = officer::external_img(qr_png_f, width = 0.5, height = 0.5),\r\n                         location = officer::ph_location(left = 8.5, top = 0.5, width = 0.75, height = 0.75)) %>%\r\n        print(target = file)\r\n    }\r\n  )\r\n}\r\n\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"sl-qr.Rproj","content":"Version: 1.0\r\n\r\nRestoreWorkspace: Default\r\nSaveWorkspace: Default\r\nAlwaysSaveHistory: Default\r\n\r\nEnableCodeIndexing: Yes\r\nUseSpacesForTab: Yes\r\nNumSpacesForTab: 2\r\nEncoding: UTF-8\r\n\r\nRnwWeave: Sweave\r\nLaTeX: pdfLaTeX\r\n","type":"text"}]
